What happens when you initialize a repository? Why do you need to do it?
-> Initializing the repository means transforming the current directory into a Git repository. 
This adds a .git folder to the current directory and makes it possible to start recording revisions of the project 
(the .git folder contains all of the necessary metadata for the repo).

How is the staging area different from the working directory and the repository? 
What value do you think it offers?
-> The staging area can be thought of as a buffer 
between the working directory and the project history.
Instead of committing all of the changes you've made since the last commit, 
the stage lets you group related changes into highly focused snapshots before actually 
committing it to the project history. 
This means you can make all sorts of edits to unrelated files, 
then go back and split them up into logical commits by adding related changes 
to the stage and commit them piece-by-piece. 
As in any revision control system, it’s important to create atomic commits so 
that it’s easy to track down bugs and revert changes with 
minimal impact on the rest of the project.

How can you use the staging area to make sure you have one commit per logical change?
-> By adding elements to the staging area each time a modification that belongs to the
"unit logical change" is made.

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?
-> Branches would be helpful in keeping the history organized when one wants to experiment
by adding some new features to the program, but does not want to change the whole program yet. 
For example, if we have a game and we want to try creating a easier version, we could
create a branch where we modify the code such that the game becomes easier, and if we decide
to have a look at the original version, we can just switch branches. We can also decide to keep
both versions and maybe extend the game to include an easy and a hard mode and here merging
the branches could become useful.
